parameters:
- name: settings
  type: object
- name: resource
  type: object  
- name: environment
  type: string

jobs:
        
  - ${{ if and(eq(parameters.settings.deploy.infrastructure.enabled, 'true'), eq(parameters.resource.deploy.infrastructure.enabled, 'true')) }}:
  
    # - deployment: ${{ replace(parameters.resource.name,'-','') }}iac
    - deployment: ${{ parameters.resource.name }}iac
      displayName: IaC - Azure App Service Deployment
      environment: ${{ parameters.environment }}
      dependsOn: resourceGroupDeploy
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: Creating App Service '${{ parameters.resource.name }}' by IaC
                inputs:
                  azureResourceManagerConnection: '${{ parameters.settings.azure.subscription.serviceConnection }}'
                  subscriptionId: ${{ parameters.settings.azure.subscription.subscriptionId }}
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: ${{ parameters.settings.azure.resourceGroup.name }}
                  location: ${{ parameters.settings.azure.resourceGroup.location }}
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/${{ parameters.resource.name }}-iac/infrastructure/appService.json'
                  overrideParameters: ${{ parameters.resource.deploy.infrastructure.overrideParameters }}
                  deploymentMode: 'Incremental'
                  deploymentOutputs: 'ArmOutputs'

  - ${{ if and(eq(parameters.settings.deploy.application.enabled, 'true'),eq(parameters.resource.deploy.application.enabled, 'true')) }}:
    - deployment:
      displayName: App - Azure App Service Deployment
      environment: ${{ parameters.environment }}
      ${{ if and(eq(parameters.settings.deploy.infrastructure.enabled, 'true'), eq(parameters.resource.deploy.infrastructure.enabled, 'true')) }}:
        dependsOn: ${{ parameters.resource.name }}iac
      ${{ else }}:
        dependsOn: resourceGroupDeploy
      strategy:
        runOnce:
          deploy:
            steps:
              
              - powershell: |
                  $timeoutMinutes = 2

                  $timeout = New-TimeSpan -Minutes $timeoutMinutes
                  $endTime = (Get-Date).Add($timeout)

                  do {
                      Start-Sleep -Seconds 10

                      Write-Host "##[command]Checking if App Service is available..." -ForegroundColor Blue

                      $statusCode = $null

                      try {

                        $uri = "https://${{ parameters.resource.deploy.infrastructure.appServiceName }}.azurewebsites.net"
                        
                        $req = Invoke-WebRequest -Uri $uri
                    
                        if($null -ne $req.StatusCode){
                          $statusCode = $req.StatusCode
                        }
                        Write-Output    "Status Code -- $statusCode"
                      } catch {}
                      
                      $timeoutReached = ((Get-Date) -gt $endTime)
                      if ($timeoutReached) {
                          Write-Warning "Timeout reached"
                          return $false
                      }
                  } until ($statusCode -eq 200 -or $timeoutReached)
                displayName: Waiting web app availability
              
              - task: AzureWebApp@1
                inputs:
                  azureSubscription: ${{ parameters.settings.azure.subscription.serviceConnection }}
                  appName: ${{ parameters.resource.deploy.infrastructure.appServiceName }}
                  package: $(Pipeline.Workspace)/${{ parameters.resource.name }}/**/*.zip
